## 数据库的设计
    1.多表之间的关系
        1.一对一:
            * 如:人和身份证
            * 分析:一个人只有一个身份证,一个身份证只能对应一个人
        2.一对多(多对一):
            * 如:部门和员工
            * 分析:一个部门有多个员工,一个员工只能对应一个部门
        3.多对多:
            * 如:学生和课程
            * 分析:一个学生可以选择很多门课程,一个课程也可以被很多学生选择
    2.实现关系:
        1.一对多(多对一):
            * 如:部门和员工
            * 实现方式:在多的一方建立外键,指向一的一方的主键。
        2.多对多:
            如:学生和课程
            * 实现方式:多对多关系实现需要借助第三张中间表。中间表至少包含两个字段,这
            两个字段作为第三张表的外键,分别指向两张表的主键
        3.一对一(了解):
            如:人和身份证

    3.数据库设计的范式
        * 概念:设计数据库时,需要遵循的一些规范。要循后边的范式要求,必须先遵循前边的所有范式要求
        
            设计关系数据库时,遵从不同的规范要求,设计出合理的关系型数据库,这些不同的规范要求被称为不同的范式,各种
            范式呈递次规范,越高的范式数据库冗余越小。
        
            目前关系数据库有六种范式:第一范式(1NF)、第二范式(2NF)、第三范式(3NF)、巴斯科德范式(Bnf)、第四
            范式(n)和第五范式(sF,又称完美范式)。
        * 分类:
            1.第一范式(1NF):每一列都是不可分割的原子数据项
            2.第二范式(2NF):在1NF的基础上,非码性必须完全依赖于候选码(在1NF基础上消除非主属性对主码的部分函数依赖)
                * 几个概念：
                    1.函数依赖：A-->B,如果通过A属性(属性组)的值，可以确定唯一B属性的值。则称B依赖于A
                        例如: 学号-->姓名。 (学号，课程名称)--> 分数
                    2.完全函数依赖: A-->B，如果A是一个属性组，则B属性值得确定需要依赖于A属性组中的所有的属性值。
                        例如：(学号，课程名称)--> 分数
                    3.部分函数依赖：A-->B，如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中的某一些值即可
                        例如：(学号，课程名称)--> 姓名
                    4.传递函数依赖：A-->B,B-->C..如果通过A属性(属性组)的值,可以确定唯一B属性的值,在通过B属性(属性组)的值可以确
                    定唯一 C 属性的值,则称 C 传递函数依赖于 A
                        例如:学号名-->系名，系名-->系主任
                    5.码:如果在一张表中,一个属性或属性组,被其他所有属性所完全依赖,则称这个属性(属性组)为该表的码
                        例如：该表中码为：(学号，课程名称)
                

            3.第三范式(3NF):在2N基础上,任何非主性不依赖于其它非主性(在2NF基础上消除传递依赖)

