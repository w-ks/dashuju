必读

    1.常用

        .x? 

        匹配中文字符： [u4e00-u9fa5]

        匹配双字节字符(包括汉字在内)：[^x00-xff]

        英文字母:[a-zA-Z]

        数字:[0-9]

        匹配中文，英文字母和数字及_: ^[u4e00-u9fa5_a-zA-Z0-9]+$

        正则表达式匹配空行、空白行
            方法一：

            ^(\t)*$\n
            1
            方法二：

            /^\s*$/

        一个正则表达式，只含有汉字、数字、字母、下划线不能以下划线开头和结尾：
                ^(?!_)(?!.*?_$)[a-zA-Z0-9_u4e00-u9fa5]+$

    
            (?!_)　　不能以_开头

            (?!.*?_$)　　不能以_结尾

            [a-zA-Z0-9_u4e00-u9fa5]+　　至少一个汉字、数字、字母、下划线

        匹配Emai地址
            [\\w[.-]]+@[\\w[.-]]+\\.[\\w]+

        匹配网址URL

        匹配国内电话号码

        匹配腾讯QQ号

        匹配中国邮政编码

        匹配18位身份证号

        匹配(年月-日)格式日期

        匹配正整数

        匹配负整数

        匹配整数

        匹配非负整数(正整数+0)

        匹配非正整数(负整数+0)

        匹配正浮点数
        
        匹配负浮点数
        与字符串结束的地方匹配
            放在程序里前面加@，否则需要\进行转义 @"^(?!_)(?!.*?_$)[a-zA-Z0-9_u4e00-u9fa5]+$"

            （或者：@"^(?!_)w*(?<!_)$" 或者 @" ^[u4E00-u9FA50-9a-zA-Z_]+$ " )

        
     




    1.常用元字符                             
                        
        .	匹配除换行符以外的任意字符         
        \w	匹配字母或数字或下划线             
        \s	匹配任意的空白符                   
        \d	匹配数字                           
        \b	匹配单词的开始或结束               
        ^	匹配字符串的开始                   
        $	匹配字符串的结束    
    2.常用限定符           
        
        * 重复零次或更多次               
        + 	重复一次或更多次           
        ?	重复零次或一次       
        {n}	重复n次      
        {n,}	重复n次或更多次       
        {n,m}	重复n到m次      

    3.常用反义词

        \W	匹配任意不是字母，数字，下划线，汉字的字符
        \S	匹配任意不是空白符的字符
        \D	匹配任意非数字的字符
        \B	匹配不是单词开头或结束的位置
        [^x]	匹配除了x以外的任意字符
        [^aeiou]	匹配除了aeiou这几个字母以外的任意字符
    4.常用模式修正符

        i	表示在进行匹配的时候不区分大小写
        m	多行识别.即将字符串视为多行,不管是那行都能匹配
        s	将字符串视为单行,转义回车换行符作为普通字符
        g	表示全局匹配
        x	将模式中的空白忽略
        A	强制从目标字符串开头匹配
        D	强制尾部无任何内容.若使用$限制结尾字符,则不允许结尾有换行
        U	禁止贪婪匹配,只匹配最近的一个字符串(不重复匹配)
        e	配合PHP函数preg_replace()使用,可以把匹配来的字符串当作正则表达式执行

1）.? 是一个固定的搭配，. 和代表可以匹配任意无限多个字符，加上？表示使用非贪婪模式进行匹配，
    也就是我们会尽可能短地做匹配，以后我们还会大量用到 .? 的搭配。 
2）(.?) 代表一个分组，在这个正则表达式中我们匹配了五个分组，在后面的遍历 item 中，item [0] 就代表第一个 
    (.?) 所指代的内容，item [1] 就代表第二个 (.?) 所指代的内容，以此类推。 
3）re.S 标志代表在匹配时为点任意匹配模式，点。也可以代表换行符。 这样我们就获取了发布人，发布时间，
    发布内容，附加图片以及点赞数。 在这里注意一下，我们要获取的内容如果是带有图片，直接输出出来比较繁琐，
    所以这里我们只获取不带图片的段子就好了。 所以，在这里我们就需要对带图片的段子进行过滤。 我们可以发现，
    带有图片的段子会带有类似下面的代码，而不带图片的则没有，所以，我们的正则表达式的 item [3] 就是获取了下面的
    内容，如果不带图片，item [3] 获取的内容便是空。