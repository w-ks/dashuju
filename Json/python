1.json.dumps 将字符串转换为json对象
    json.dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, 
                cls=None, indent=None, separators=None, encoding="utf-8", default=None, 
                sort_keys=False, **kw)
    (1) obj: ！！！ 转化成json的对象。
        sort_keys =True: ！！！ 是告诉编码器按照字典排序(a到z)输出。如果是字典类型的python对象，就把关键字按照字典排序。
        indent: ！！！  参数根据数据格式缩进显示，读起来更加清晰。
        separators: ！！(可指定jsonobj之间的分隔符，键值之间的分隔符)是分隔符的意思，参数意思分别为不同dict项之间的分隔符和dict项内key和value之间的分隔符，把：和，后面的空格都除去了。
        skipkeys： (避免键类型错误)默认值是False，如果dict的keys内的数据不是python的基本类型(str,unicode,int,long,float,bool,None)，设置为False时，就会报TypeError的错误。此时设置成True，则会跳过这类key 。
        ensure_ascii=True： 默认输出ASCLL码，如果把这个该成False,就可以输出中文。
        check_circular：！！ 如果check_circular为false，则跳过对容器类型的循环引用检查，循环引用将导致溢出错误(或更糟的情况)。
        allow_nan：如果allow_nan为假，则ValueError将序列化超出范围的浮点值(nan、inf、-inf)，严格遵守JSON规范，而不是使用JavaScript等价值(nan、Infinity、-Infinity)。
        default：default(obj)是一个函数，它应该返回一个可序列化的obj版本或引发类型错误。默认值只会引发类型错误。

2.json.dump()
    文件中使用dump解析 输出文件流

3.json.dump()和json.dumps()的区别
    json.dumps() 是把python对象转换成json对象的一个过程，生成的是字符串。
    json.dump() 是把python对象转换成json对象生成一个fp的文件流，和文件相关。    

4.json.loads()
    loads操作的是字符串
    load操作的是文件流

    

